service:
  name: onearch

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  customDomain:
    domainName: one.wdsm.io
    basePath: api
    certificateName: '*.wdsm.io'
    stage: ${self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 256
  timeout: 5
  environment:
    S3: ${self:service}-storage-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    SLS_STAGE: ${self:custom.stage}
  iamRoleStatements:
    - Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
      Effect: Allow
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::${self:provider.environment.S3}/*"

functions:
  hello:
    handler: endpoints/home.handler
    events:
      - http:
          method: get
          path: hello

resources:
  Resources:
    Onearch:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
